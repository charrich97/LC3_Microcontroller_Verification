uvmf:
  environments:
    decode:
      ## Agents are defined in a LIST so that the order is maintained. This is important
      ## because of how the BFMs are passed in at the bench utilize this same order when
      ## this environment's initialize() routine is called.
      agents :
        - name: "decode_in_agent" 
          type: "decode_in" 
          initiator_responder: "INITIATOR"
        - name: "decode_out"
          type: "decode_out"
          initiator_responder: "RESPONDER"
      ## Analysis components are defined externally in a 'util_components' structure.
      ## They are instantiated here.
   #   analysis_components :
   #     - name: "decode_predictor"
   #       type: "decode_predictor"
   #   ## Each scoreboard is keyed by the scoreboard instantiation name with
   #   ## information on the scoreboard type and what type of transaction it
   #   ## will be parsing
   #   scoreboards : 
   #     - name: "decode_scoreboard"
   #       sb_type: "uvmf_in_order_scoreboard"
   #       trans_type: "decode_out_transaction"
   #   ## Define top-level analysis ports here. Keyed by the name of each
   #   ## one, specify the type of transaction passing through as well as
   #   ## which internal component will be driving the AP.
   #   analysis_ports :
   #     - name: "decode_in_agent_inst.monitored_ap"
   #       trans_type: "decode_in_transaction"
   #       connected_to: "decode_predict_inst.analysis_export"
   #     - name: "decode_out_agent_inst.monitored_ap"
   #       trans_type: "decode_out_transaction"
   #       connected_to: "decode_sb_inst.actual"
   #     - name: "decode_predict_inst.predictor_ap"
   #       trans_type: "decode_out_transaction"
   #       connected_to: "decode_sb_inst.expected"
   #   ## Define top-level analysis exports. Keyed by the unique name of each
   #   ## one, specify the type of transaction passing through as well as
   #   ## which internal component will be driven by this port.
   #   #analysis_exports :
   #   #  - name: "external_pkt_ep"
   #   #    trans_type: "pkt_transaction"
   #   #    connected_to: "block_a_pred.secure_data_plane_in_ae"
   #   ### Define internal TLM connections. Each entry must have a 'driver' and
   #   ### a 'receiver' entry used to determine the full connection.
   #   tlm_connections :
   #     # Connection 0
   #     - driver:   "decode_in_agent.monitored_ap"
   #       receiver: "decode_predict_inst.analysis_export"
   #     # Connection 1
   #     - driver:   "decode_out_agent_inst.monitored_ap"
   #       receiver: "decode_sb_inst.actual"
   #     # Connection 2
   #     - driver:   "decode_predict_inst.predictor_ap"
   #       receiver: "decode_sb_inst.expected"
      ### Environment-level configuration variables. Each entry is keyed with a 
      ### unique name and is assigned a 'type' and 'isrand' value.
      #config_vars :
      ### Environment-level configuration constraints. Each entry is keyed with
      ### a unique name  with the value being an SVA constraint block
      #config_constraints:
      #config_variable_values:


